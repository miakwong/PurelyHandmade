// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String?  @unique
  password  String
  firstName String?
  lastName  String?
  phone     String?
  address   String?
  birthday  DateTime?
  gender    String?
  avatar    String?
  role      String   @default("user")
  isAdmin   Boolean  @default(false)
  status    String   @default("active")
  bio       String?  @db.Text
  canOrder  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?
  
  orders    Order[]
  reviews   Review[]
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  sku         String    @unique
  price       Float
  stock       Int       @default(0)
  description String?   @db.Text
  image       String?
  gallery     Json?
  featured    Boolean   @default(false)
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id])
  
  designerId  Int?
  designer    Designer? @relation(fields: [designerId], references: [id])
  
  orderItems  OrderItem[]
  reviews     Review[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?   @db.Text
  image       String?
  featured    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  products    Product[]
}

model Designer {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  bio         String?   @db.Text
  image       String?
  featured    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  products    Product[]
}

model Order {
  id           Int        @id @default(autoincrement())
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  orderDate    DateTime   @default(now())
  status       String     @default("pending")
  totalAmount  Float
  shippingInfo Json?
  paymentInfo  Json?
  notes        String?    @db.Text
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  orderItems   OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  title     String?
  content   String   @db.Text
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
